const pool = require('../database/db');

const OI_rank = `

CREATE TABLE IF NOT EXISTS OI_rank
(
 name         varchar(50) NOT NULL,
 totalCorrect int NOT NULL,
 totalSubmit  int NOT NULL,
 userId       uuid NOT NULL,
 CONSTRAINT PK_anwer PRIMARY KEY ( userId ),
 CONSTRAINT FK_3802 FOREIGN KEY ( userId ) REFERENCES User_Profile ( userId )
);

CREATE INDEX fkIdx_3802 ON OI_rank
(
 userId
);

`;
const ACM_rank = `

CREATE TABLE IF NOT EXISTS ACM_rank
(
 name         varchar(50) NOT NULL,
 totalCorrect int NOT NULL,
 totalSubmit  int NOT NULL,
 userId       uuid NOT NULL,
 CONSTRAINT PK_anwer PRIMARY KEY ( userId ),
 CONSTRAINT FK_3805 FOREIGN KEY ( userId ) REFERENCES User_Profile ( userId )
);

CREATE INDEX fkIdx_3805 ON ACM_rank
(
 userId
);

`;
const contest_announcements = `

CREATE TABLE IF NOT EXISTS contest_announcements
(
 examAnnNo   int NOT NULL,
 title       varchar(50) NOT NULL,
 description text NOT NULL,
 examId      int NOT NULL,
 adminId     uuid NOT NULL,
 isVisible   boolean NOT NULL,
 CONSTRAINT PK_announcements PRIMARY KEY ( examAnnNo ),
 CONSTRAINT FK_148 FOREIGN KEY ( examId ) REFERENCES contest ( examNo ),
 CONSTRAINT FK_3830 FOREIGN KEY ( adminId ) REFERENCES Admin_Login ( adminId )
);

CREATE INDEX fkIdx_148 ON contest_announcements
(
 examId
);

CREATE INDEX fkIdx_3830 ON contest_announcements
(
 adminId
);

`;
const announcements = `

CREATE TABLE IF NOT EXISTS announcements
(
 id          int NOT NULL GENERATED ALWAYS AS IDENTITY (
 start 0
 ),
 title       varchar(50) NOT NULL,
 description text NOT NULL,
 adminId     uuid NOT NULL,
 isVisible   boolean NOT NULL,
 CONSTRAINT PK_announcements PRIMARY KEY ( id ),
 CONSTRAINT FK_3827 FOREIGN KEY ( adminId ) REFERENCES Admin_Login ( adminId )
);

CREATE INDEX fkIdx_3827 ON announcements
(
 adminId
);

`;
const question_attempt_testcase = `

CREATE TABLE IF NOT EXISTS question_attempt_testcase
(
 attemptId  int NOT NULL,
 testcaseNo int NOT NULL,
 status     varchar(50) NOT NULL,
 memory     int NOT NULL,
 time       int NOT NULL,
 score      int NOT NULL,
 CONSTRAINT PK_anwer PRIMARY KEY ( attemptId, testcaseNo ),
 CONSTRAINT FK_326 FOREIGN KEY ( attemptId ) REFERENCES question_attempt ( attemptId )
);

CREATE INDEX fkIdx_326 ON question_attempt_testcase
(
 attemptId
);

`;
const adminLog = `

CREATE TABLE IF NOT EXISTS adminLog
(
 logNo     int NOT NULL,
 title     varchar(100) NOT NULL,
 detail    text NOT NULL,
 timestamp timestamp NOT NULL,
 adminId   uuid NOT NULL,
 CONSTRAINT PK_adminlog PRIMARY KEY ( logNo ),
 CONSTRAINT FK_3833 FOREIGN KEY ( adminId ) REFERENCES Admin_Login ( adminId )
);

CREATE INDEX fkIdx_3833 ON adminLog
(
 adminId
);

`;
const contest = `

CREATE TABLE IF NOT EXISTS contest
(
 examNo       int NOT NULL GENERATED BY DEFAULT AS IDENTITY (
 start 0
 ),
 title        varchar(50) NOT NULL,
 examRuleType varchar(50) NOT NULL,
 description  text NULL,
 startTime    timestamp NOT NULL,
 endTime      timestamp NOT NULL,
 status       boolean NOT NULL,
 adminId      uuid NOT NULL,
 CONSTRAINT PK_table_3 PRIMARY KEY ( examNo ),
 CONSTRAINT FK_3836 FOREIGN KEY ( adminId ) REFERENCES Admin_Login ( adminId )
);

CREATE INDEX fkIdx_3836 ON contest
(
 adminId
);

`;
const question_attempt = `

CREATE TABLE IF NOT EXISTS question_attempt
(
 attemptId  int NOT NULL,
 userId     uuid NOT NULL,
 questionId int NOT NULL,
 attempNo   int NOT NULL GENERATED BY DEFAULT AS IDENTITY (
 start 0
 ),
 score      int NOT NULL,
 when       time NOT NULL,
 status     varchar(50) NOT NULL,
 time       int NOT NULL,
 memory     int NOT NULL,
 language   varchar(50) NOT NULL,
 code       text NOT NULL,
 CONSTRAINT PK_table_3 PRIMARY KEY ( attemptId ),
 CONSTRAINT FK_133 FOREIGN KEY ( questionId ) REFERENCES questions ( id ),
 CONSTRAINT FK_3228 FOREIGN KEY ( userId ) REFERENCES User_Profile ( userId )
);

CREATE INDEX fkIdx_133 ON question_attempt
(
 questionId
);

CREATE INDEX fkIdx_3228 ON question_attempt
(
 userId
);

`;
const contest_question = `

CREATE TABLE IF NOT EXISTS contest_question
(
 id             int NOT NULL GENERATED ALWAYS AS IDENTITY (
 start 0
 ),
 examQuestionNo int NOT NULL,
 exam_id        int NOT NULL,
 questionId     int NOT NULL,
 CONSTRAINT PK_questions PRIMARY KEY ( id ),
 CONSTRAINT FK_96 FOREIGN KEY ( exam_id ) REFERENCES contest ( examNo ),
 CONSTRAINT FK_99 FOREIGN KEY ( questionId ) REFERENCES questions ( id )
);

CREATE INDEX fkIdx_96 ON contest_question
(
 exam_id
);

CREATE INDEX fkIdx_99 ON contest_question
(
 questionId
);

`;
const contest_attempt = `

CREATE TABLE IF NOT EXISTS contest_attempt
(
 userId        uuid NOT NULL,
 QuestionID    int NOT NULL,
 examAttemptNo int NOT NULL,
 score         int NOT NULL,
 timeTaken     time NOT NULL,
 CONSTRAINT PK_table_3 PRIMARY KEY ( userId, QuestionID, examAttemptNo ),
 CONSTRAINT FK_3231 FOREIGN KEY ( userId ) REFERENCES User_Profile ( userId ),
 CONSTRAINT FK_337 FOREIGN KEY ( QuestionID ) REFERENCES contest_question ( id )
);

CREATE INDEX fkIdx_3231 ON contest_attempt
(
 userId
);

CREATE INDEX fkIdx_337 ON contest_attempt
(
 QuestionID
);

`;
const questionTestCases = `

CREATE TABLE IF NOT EXISTS questionTestCases
(
 questionId int NOT NULL,
 fileNo     int NOT NULL,
 filePath   path NOT NULL,
 CONSTRAINT PK_testcases PRIMARY KEY ( questionId, fileNo ),
 CONSTRAINT FK_32 FOREIGN KEY ( questionId ) REFERENCES questions ( id )
);

CREATE INDEX fkIdx_32 ON questionTestCases
(
 questionId
);

`;
const questions = `

CREATE TABLE IF NOT EXISTS questions
(
 id          int NOT NULL,
 title       varchar(50) NOT NULL,
 description text NULL,
 hint        text NULL,
 intputDes   text NULL,
 outputDes   text NULL,
 timeLimit   int NOT NULL,
 memoryLimit int NOT NULL,
 difficulty  varchar(20) NOT NULL,
 visibility  boolean NOT NULL,
 ruleType    varchar(50) NOT NULL,
 adminId     uuid NOT NULL,
 CONSTRAINT PK_questions PRIMARY KEY ( id ),
 CONSTRAINT FK_3839 FOREIGN KEY ( adminId ) REFERENCES Admin_Login ( adminId )
);

CREATE INDEX fkIdx_3839 ON questions
(
 adminId
);

`;
const questionTag = `

CREATE TABLE IF NOT EXISTS questionTag
(
 questionId int NOT NULL,
 tagNo      int NOT NULL,
 tagName    varchar(100) NOT NULL,
 CONSTRAINT PK_tag PRIMARY KEY ( questionId, tagNo ),
 CONSTRAINT FK_47 FOREIGN KEY ( questionId ) REFERENCES questions ( id )
);

CREATE INDEX fkIdx_47 ON questionTag
(
 questionId
);

`;
const questionSample = `

CREATE TABLE IF NOT EXISTS questionSample
(
 questionId int NOT NULL,
 sampleNo   int NOT NULL,
 intput     text NOT NULL,
 output     text NOT NULL,
 CONSTRAINT PK_questionsample PRIMARY KEY ( questionId, sampleNo ),
 CONSTRAINT FK_39 FOREIGN KEY ( questionId ) REFERENCES questions ( id )
);

CREATE INDEX fkIdx_39 ON questionSample
(
 questionId
);

`;

exports.createG08G10Table = async (req, res) => {
  try{
    await createTable_questions;
    await createTable_ACM_rank;
    await createTable_OI_rank;
    await createTable_announcements;
    await createTable_contest;
    await createTable_adminLog;
    await createTable_contest_announcements;
    await createTable_contest_question;
    await createTable_contest_attempt;
    await createTable_questionSample;
    await createTable_questionTag;
    await createTable_questionTestCases;
    await createTable_question_attempt;
    await createTable_question_attempt_testcase;
    console.log('Create G08+G10 Table Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }

}

const createTable_OI_rank = async (req, res, next) => {
    try {
      const job = await pool.query(OI_rank);
      console.log('Create table OI_rank Successfully');
    } catch (err) {
      console.error(err.stack.red);
    }
};
const createTable_ACM_rank = async (req, res, next) => {
  try {
    const job = await pool.query(ACM_rank);
    console.log('Create table ACM_rank Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_contest_announcements = async (req, res, next) => {
  try {
    const job = await pool.query(contest_announcements);
    console.log('Create table contest_announcements Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_announcements = async (req, res, next) => {
  try {
    const job = await pool.query(announcements);
    console.log('Create table announcements Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_question_attempt_testcase = async (req, res, next) => {
  try {
    const job = await pool.query(question_attempt_testcase);
    console.log('Create table question_attempt_testcase Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_adminLog = async (req, res, next) => {
  try {
    const job = await pool.query(adminLog);
    console.log('Create table adminLog Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_contest = async (req, res, next) => {
  try {
    const job = await pool.query(contest);
    console.log('Create table contest Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_question_attempt = async (req, res, next) => {
  try {
    const job = await pool.query(question_attempt);
    console.log('Create table question_attempt Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_contest_question = async (req, res, next) => {
  try {
    const job = await pool.query(contest_question);
    console.log('Create table contest_question Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_contest_attempt = async (req, res, next) => {
  try {
    const job = await pool.query(contest_attempt);
    console.log('Create table contest_attempt Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_questionTestCases = async (req, res, next) => {
  try {
    const job = await pool.query(questionTestCases);
    console.log('Create table questionTestCases Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_questions = async (req, res, next) => {
  try {
    const job = await pool.query(questions);
    console.log('Create table questions Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_questionTag = async (req, res, next) => {
  try {
    const job = await pool.query(questionTag);
    console.log('Create table questionTag Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};
const createTable_questionSample = async (req, res, next) => {
  try {
    const job = await pool.query(questionSample);
    console.log('Create table questionSample Successfully');
  } catch (err) {
    console.error(err.stack.red);
  }
};